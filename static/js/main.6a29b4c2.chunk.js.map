{"version":3,"sources":["modules/Titles/Titles.js","modules/Form/Form.js","modules/Weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","wind","wind_deg","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","speed","deg","stop","modules_Titles_Titles","modules_Form_Form","modules_Weather_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a29b4c2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Titles extends React.Component {\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h1 className=\"title-container__title\">Weather Widget</h1>\r\n        <h3 className=\"container__subtitle\">Find current temperatures, conditions and more...</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n  render(){\r\n    return (\r\n      <form onSubmit={this.props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"city...\"></input>\r\n        <input type=\"text\" name = \"country\" placeholder=\"country...\"></input>\r\n        <button>Get Weather!</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\n\r\nconst Weather = (props) => {\r\n  return(\r\n    <div className=\"weather__info\">\r\n      {\r\n         props.city && props.country &&\r\n         <p className=\"weather__key\">\r\n         Location:\r\n         <span className=\"weather__value\"> { props.city }, { props.country} </span>\r\n         </p>\r\n      }\r\n      {\r\n         props.temperature &&\r\n         <p className=\"weather__key\">\r\n         Temperature:\r\n         <span className=\"weather__value\"> { props.temperature } &#8451; </span>\r\n        </p>\r\n      }\r\n      {\r\n         props.humidity &&\r\n         <p className=\"weather__key\">\r\n         Humidity: <span className=\"weather__value\">\r\n          { props.humidity }\r\n         </span>\r\n\r\n         </p>\r\n      }\r\n      {\r\n         props.description && <p className=\"weather__key\">\r\n         Conditions:\r\n         <span className=\"weather__value\"> { props.description }\r\n         </span>\r\n        </p>\r\n      }\r\n      {\r\n         props.wind && props.wind_deg && <p className=\"weather__key\">\r\n         Wind Conditions:\r\n         Speed: <span className=\"weather__value\"> { props.wind } km/h</span>,\r\n         Direction: <span className=\"weather__value\">\r\n        { props.wind_deg } &#176; </span> </p>\r\n      }\r\n      {\r\n         props.error && <p className=\"weather__error\"> {props.error} </p>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nimport Titles from \"./modules/Titles/Titles\"\r\nimport Form from \"./modules/Form/Form\"\r\nimport Weather from \"./modules/Weather/Weather\"\r\n\r\nconst API_KEY = \"d5d6bd7baefaaf6d315cf4f2c66f2369\"\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    wind: undefined,\r\n    wind_deg: undefined,\r\n    error: undefined\r\n  }\r\n  //\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country =  e.target.elements.country.value;\r\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&mode=json&appid=${API_KEY}&units=metric`);\r\n    const data = await api_call.json();\r\n    console.log(data);\r\n\r\n    if (city && country) {\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        description: data.weather[0].description,\r\n        wind: data.wind.speed,\r\n        wind_deg: data.wind.deg,\r\n        error: \"\"\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        wind: undefined,\r\n        wind_deg: undefined,\r\n        error: \"Please enter a valid Location\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render (){\r\n    return (\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-5 title-container\">\r\n                  <Titles />\r\n                </div>\r\n                <div className=\"col-xs-7 form-container\">\r\n                  <Form getWeather={this.getWeather}/>\r\n                  <Weather\r\n                  temperature={this.state.temperature}\r\n                  city={this.state.city}\r\n                  country={this.state.country}\r\n                  humidity={this.state.humidity}\r\n                  description={this.state.description}\r\n                  wind={this.state.wind}\r\n                  wind_deg={this.state.wind_deg}\r\n                  error={this.state.error}/>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}